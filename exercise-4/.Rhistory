# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages('nycflights13')
library(flight)
library(nycflights13)
library(dplyr)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
num_row <- nrow(flights)
num-col <- ncol(flights)
num_col <- ncol(flights)
col_name <- colnames(flights)
?flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_change <- mutate(flights, change_while_fly = arr_delay - dep_delay)
View(time_change)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change_while_fly = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, change_while_fly)
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>% mutate(change_while_fly = arr_delay - dep_delay) %>%
arrange(flights, change_while_fly)
styler:::style_active_file()
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$change_while_fly)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
ave(flights$change_while_fly, na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
unique(ave(flights$change_while_fly, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$change_while_fly, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$change_while_fly, na.rm = TRUE)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(change_while_fly = arr_delay - dep_delay) %>%
arrange(flights, change_while_fly)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change_while_fly = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, change_while_fly)
View(time_change)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change_while_fly = arr_delay - dep_delay)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
num_row <- nrow(flights)
num_col <- ncol(flights)
library(nycflights13)
clear
remove(list = ls())
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
num_row <- nrow(flights)
num_col <- ncol(flights)
col_name <- colnames(flights)
flights <- flights %>%
mutate(change_while_fly = arr_delay - dep_delay) %>%
arrange(flights, change_while_fly)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change_while_fly = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, change_while_fly)
flights <- flights %>%
mutate(change_while_fly = arr_delay - dep_delay) %>%
arrange(change_while_fly)
remove(list = ls())
num_col <- ncol(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
num_row <- nrow(flights)
col_name <- colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, change_while_fly = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, change_while_fly)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(change_while_fly = arr_delay - dep_delay) %>%
arrange(change_while_fly)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$change_while_fly)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$change_while_fly, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ny_to_sea <- flights %>%
select(origin, destination, gain_in_air) %>%
filter(dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ny_to_sea <- flights %>%
select(origin, dest, gain_in_air) %>%
filter(dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
ny_to_sea <- flights %>%
select(origin, dest, change_while_fly) %>%
filter(dest == "SEA")
View(ny_to_sea)
# On average, did flights to SeaTac gain or loose time?
mean(ny_to_sea$change_while_fly, na.rm = TRUE)
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(change_while_fly, na.rm = TRUE),
min_time = min(change_while_fly, na.rm = TRUE),
max_time = max(change_while_fly, na.rm = TRUE)
)
summary
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# Which month had the greatest average departure delay?
greatest_dep_delay <- max(dep_delay_by_month)
# Which month had the greatest average departure delay?
greatest_dep_delay <- filter(dep_delay_by_month, delay = max(delay)) %>%
select(month)
greatest_dep_delay <- filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
greatest_dep_delay
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(dep_delay_by_month)
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_delay)
head(arr_delay_by_month)
