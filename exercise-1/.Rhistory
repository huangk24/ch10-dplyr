# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
# Use the `libary()` function to load the "fueleconomy" package
library('fueleconomy')
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View('fueleconomy')
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View('vehicles')
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
number_of_manufacturers <- unique(makes)
number_of_manufacturers
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
number_of_manufacturers <- length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
vehicles_1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
hwy_1997 <- order(vehicles_1997)
hwy_1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
hwy_1997 <- order(vehicles_1997$hwy)
hwy_1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
hwy_1997 <- veihicles_1997[order(vehicles_1997$hwy),]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
hwy_1997 <- vehicles_1997[order(vehicles_1997$hwy),]
hwy_1997
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$cty + vehicles_1997$hwy) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20,]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg)]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy), "id"]
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
filtered[filtered$hwy = max(filtered$hwy), "model"]
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
filtered[filtered$hwy = max(filtered$hwy), "model"]
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
filtered[filtered$hwy = max(filtered$hwy), "model"]
}
filtered[filtered$hwy = max(filtered$hwy), "model"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
make_year_filter("Honda", 1995)
filtered[filtered$hwy == max(filtered$hwy), "model"]
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
source('~/UW/2018 spring/info 201/ch10-dplyr/exercise-2/exercise.R')
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages(dplyr)
# Install and load the "dplyr" library
install.packages("dplyr")
library(dplyr)
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
different_manufacturers <- filter(vehicles, )
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
different_manufacturers <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
different_manufacturers <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
number_manufacturers <- distinct(different_manufacturers)
number_manufacturers
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
number_manufacturers <- length(distinct(different_manufacturers))
number_manufacturers
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
number_manufacturers <- nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
car_1997 <- filter(vehicles, vehicles$year == 1997)
# Filter the data set for vehicles manufactured in 1997
car_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
car_hwy_1997 <- arrange(car_1997, hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
car_hwy_1997 <- arrange(car_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
new_vehicles <- mutate(vehicles, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_dirve_20_mpg <- filter(vehicles, drive == '2-Wheel Drive' & cty > 20)
